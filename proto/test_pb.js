/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

const jspb = require('google-protobuf')
const goog = jspb
const global = Function('return this')()

goog.exportSymbol('proto.AnotherOne', null, global)
goog.exportSymbol('proto.FOO', null, global)
goog.exportSymbol('proto.Test', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Test = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Test, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Test.displayName = 'proto.Test'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnotherOne = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.AnotherOne, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AnotherOne.displayName = 'proto.AnotherOne'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.Test.prototype.toObject = function (opt_includeInstance) {
    return proto.Test.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Test} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.Test.toObject = function (includeInstance, msg) {
    let f; const obj = {
      num: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
      payload: jspb.Message.getFieldWithDefault(msg, 2, ''),
      payloads: jspb.Message.getFieldWithDefault(msg, 3, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Test}
 */
proto.Test.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes)
  const msg = new proto.Test()
  return proto.Test.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Test} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Test}
 */
proto.Test.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    const field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setNum(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setPayload(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setPayloads(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Test.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter()
  proto.Test.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Test} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Test.serializeBinaryToWriter = function (message, writer) {
  let f
  f = message.getNum()
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    )
  }
  f = message.getPayload()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getPayloads()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
}

/**
 * optional float num = 1;
 * @return {number}
 */
proto.Test.prototype.getNum = function () {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0))
}

/** @param {number} value */
proto.Test.prototype.setNum = function (value) {
  jspb.Message.setProto3FloatField(this, 1, value)
}

/**
 * optional string payload = 2;
 * @return {string}
 */
proto.Test.prototype.getPayload = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/** @param {string} value */
proto.Test.prototype.setPayload = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string payloads = 3;
 * @return {string}
 */
proto.Test.prototype.getPayloads = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/** @param {string} value */
proto.Test.prototype.setPayloads = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.AnotherOne.prototype.toObject = function (opt_includeInstance) {
    return proto.AnotherOne.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnotherOne} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.AnotherOne.toObject = function (includeInstance, msg) {
    let f; const obj = {
      list: jspb.Message.getFieldWithDefault(msg, 1, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnotherOne}
 */
proto.AnotherOne.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes)
  const msg = new proto.AnotherOne()
  return proto.AnotherOne.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnotherOne} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnotherOne}
 */
proto.AnotherOne.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    const field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.FOO} */ (reader.readEnum())
        msg.setList(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnotherOne.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter()
  proto.AnotherOne.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnotherOne} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnotherOne.serializeBinaryToWriter = function (message, writer) {
  let f
  f = message.getList()
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    )
  }
}

/**
 * optional FOO list = 1;
 * @return {!proto.FOO}
 */
proto.AnotherOne.prototype.getList = function () {
  return /** @type {!proto.FOO} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/** @param {!proto.FOO} value */
proto.AnotherOne.prototype.setList = function (value) {
  jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * @enum {number}
 */
proto.FOO = {
  BAR: 0
}

goog.object.extend(exports, proto)
